// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7969141785886844258),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(2, 795492034855106736),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 994299134111669963),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 795492034855106736),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 4846296317534595065),
      name: 'Budget',
      lastPropertyId: const obx_int.IdUid(2, 356114452839059171),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6234859408928412394),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 356114452839059171),
            name: 'total',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 2805564276292962438),
      name: 'TransactionModel',
      lastPropertyId: const obx_int.IdUid(5, 938738800996760024),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8371568011891108233),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6080761075391451087),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8418078567290834692),
            name: 'info',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3359805188497414731),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 938738800996760024),
            name: 'dateTime',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 2805564276292962438),
      lastIndexId: const obx_int.IdUid(2, 692103148197058368),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [7190744561051462584, 3976702536884839582],
      retiredIndexUids: const [3596430464809849189, 692103148197058368],
      retiredPropertyUids: const [
        7208464291668526079,
        8220836507938203182,
        8129387369698055221,
        6210221181358811734,
        2807017892982031183,
        2159754513565104076,
        5121703608865787334,
        5731596018642630957,
        8877574802391516773,
        7890271508789146025
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[0],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Category(id: idParam, name: nameParam);

          return object;
        }),
    Budget: obx_int.EntityDefinition<Budget>(
        model: _entities[1],
        toOneRelations: (Budget object) => [],
        toManyRelations: (Budget object) => {},
        getId: (Budget object) => object.id,
        setId: (Budget object, int id) {
          object.id = id;
        },
        objectToFB: (Budget object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.total);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final totalParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = Budget(id: idParam, total: totalParam);

          return object;
        }),
    TransactionModel: obx_int.EntityDefinition<TransactionModel>(
        model: _entities[2],
        toOneRelations: (TransactionModel object) => [],
        toManyRelations: (TransactionModel object) => {},
        getId: (TransactionModel object) => object.id,
        setId: (TransactionModel object, int id) {
          object.id = id;
        },
        objectToFB: (TransactionModel object, fb.Builder fbb) {
          final infoOffset = fbb.writeString(object.info);
          final categoryOffset = fbb.writeString(object.category);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.amount);
          fbb.addOffset(2, infoOffset);
          fbb.addOffset(3, categoryOffset);
          fbb.addInt64(4, object.dateTime.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final infoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final dateTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = TransactionModel(
              id: idParam,
              amount: amountParam,
              info: infoParam,
              category: categoryParam,
              dateTime: dateTimeParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.id].
  static final id =
      obx.QueryIntegerProperty<Category>(_entities[0].properties[0]);

  /// See [Category.name].
  static final name =
      obx.QueryStringProperty<Category>(_entities[0].properties[1]);
}

/// [Budget] entity fields to define ObjectBox queries.
class Budget_ {
  /// See [Budget.id].
  static final id =
      obx.QueryIntegerProperty<Budget>(_entities[1].properties[0]);

  /// See [Budget.total].
  static final total =
      obx.QueryDoubleProperty<Budget>(_entities[1].properties[1]);
}

/// [TransactionModel] entity fields to define ObjectBox queries.
class TransactionModel_ {
  /// See [TransactionModel.id].
  static final id =
      obx.QueryIntegerProperty<TransactionModel>(_entities[2].properties[0]);

  /// See [TransactionModel.amount].
  static final amount =
      obx.QueryDoubleProperty<TransactionModel>(_entities[2].properties[1]);

  /// See [TransactionModel.info].
  static final info =
      obx.QueryStringProperty<TransactionModel>(_entities[2].properties[2]);

  /// See [TransactionModel.category].
  static final category =
      obx.QueryStringProperty<TransactionModel>(_entities[2].properties[3]);

  /// See [TransactionModel.dateTime].
  static final dateTime =
      obx.QueryDateProperty<TransactionModel>(_entities[2].properties[4]);
}
